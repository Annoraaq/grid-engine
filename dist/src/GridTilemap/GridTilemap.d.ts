import { Direction } from "./../Direction/Direction";
import { Vector2 } from "../Utils/Vector2/Vector2";
import { GridCharacter } from "../GridCharacter/GridCharacter";
import { LayerVecPos } from "../Pathfinding/ShortestPathAlgorithm";
import { CollisionStrategy } from "../Collisions/CollisionStrategy";
import { CharLayer } from "../GridEngine";
import { Tilemap } from "./Tilemap";
export declare class GridTilemap {
    private tilemap;
    private collisionTilePropertyName;
    private static readonly ONE_WAY_COLLIDE_PROP_PREFIX;
    private characters;
    private charBlockCache;
    private transitions;
    constructor(tilemap: Tilemap, collisionTilePropertyName: string, collisionStrategy: CollisionStrategy);
    addCharacter(character: GridCharacter): void;
    removeCharacter(charId: string): void;
    getCharacters(): GridCharacter[];
    getCharactersAt(position: Vector2, layer: string): Set<GridCharacter>;
    hasBlockingTile(pos: Vector2, charLayer: string | undefined, direction?: Direction, ignoreHasTile?: boolean): boolean;
    getTransition(pos: Vector2, fromLayer?: string): string | undefined;
    setTransition(pos: Vector2, fromLayer: CharLayer, toLayer: CharLayer): void;
    getTransitions(): Map<CharLayer, Map<CharLayer, CharLayer>>;
    hasNoTile(pos: Vector2, charLayer?: string): boolean;
    hasBlockingChar(pos: Vector2, layer: string | undefined, collisionGroups: string[], exclude?: Set<string>): boolean;
    isInRange(pos: Vector2): boolean;
    toMapDirection(direction: Direction): Direction;
    fromMapDirection(direction: Direction): Direction;
    isIsometric(): boolean;
    getTilePosInDirection(position: LayerVecPos, direction: Direction): LayerVecPos;
    private isLayerBlockingAt;
    private getCharLayerIndexes;
    private findPrevAndCharLayer;
    private getCollisionRelevantLayers;
    private getLowestCharLayer;
}
